# -*- Mode: makefile -*-
# Copyright (c) 2001-2002, 
#  George C. Necula    <necula@cs.berkeley.edu>
#  Scott McPeak        <smcpeak@cs.berkeley.edu>
#  Wes Weimer          <weimer@cs.berkeley.edu>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. The names of the contributors may not be used to endorse or promote
# products derived from this software without specific prior written
# permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


COMPILEFLAGS += -I $(OBJDIR)

# sm: two styles for echoing compilation progress:
#   style 1, by George:
#     - print English descriptions of what's happening
#     - set ECHO to "" to see *everything*
#   style 2, by Scott:
#     - do not print English descriptions
#     - print every shell command that is executed which has a side effect,
#       so that they could be pasted into a shell to reproduce manually
#     - omit some of the details of dependency generation
#
# to be able to choose which style, several variables are used:
#   @$(NARRATIVE)  - put this before English descriptions for style 1
#   @$(COMMAND)    - put this before shell commands which are to be
#                    printed for style 2; the command is *not* executed
#   $(AT)          - put this before shell commands which are to be executed,
#                    and also printed in style 2
#   $(ECHO)        - use in place of '@' for things not printed in either style
ifdef ECHOSTYLE_SCOTT
  # 'true' silently consumes its arguments, whereas 'echo' prints them
  NARRATIVE   := true           
  COMMAND     := echo
  AT          := 
  ECHO        := @
else
  NARRATIVE   := echo
  COMMAND     := true
  # change these next two definitions to <empty> to echo everything,
  # or leave as @ to suppress echoing
  AT          := @
  ECHO        := @
endif

COMPILEFLAGS.OPT := $(COMPILEFLAGS) -inline 10
COMPILEFLAGS.BYTE:= $(COMPILEFLAGS)
LINKFLAGS.OPT    := $(LINKFLAGS) -inline 10
LINKFLAGS.BYTE   := $(LINKFLAGS)

ifdef WIN32
    COMPILEFLAGS.BYTE += -ccopt /Zi -ccopt /Od
    LINKFLAGS.BYTE    += -ccopt /Zi -ccopt /Od
    COMPILEFLAGS.OPT  += -ccopt /Ox
    EXE               := .exe
else
    COMPILEFLAGS.BYTE += -g -ccopt -g
    LINKFLAGS.BYTE    += -g -ccopt -g
    COMPILEFLAGS.OPT  += -ccopt -O3
    EXE               := 
endif

ifdef STATIC
    COMPILEFLAGS.OPT   += -ccopt -static
    LINKFLAGS.OPT      += -ccopt -static
endif

ifdef PROFILE
  COMPILEFLAGS.OPT   += -p
  LINKFLAGS.OPT      += -p
endif


CAMLC.OPT      = $(CAMLDIR)ocamlopt  $(COMPILEFLAGS.OPT)
CAMLLINK.OPT   = $(CAMLDIR)ocamlopt  $(LINKFLAGS.OPT)

CAMLC.BYTE     = $(CAMLDIR)ocamlc -g      $(COMPILEFLAGS.BYTE)
CAMLLINK.BYTE  = $(CAMLDIR)ocamlc -custom $(LINKFLAGS.BYTE)


ifdef UNSAFE 
    CAMLC.OPT      := $(CAMLC.OPT) -unsafe -noassert
endif


    # Allow searching for .ml and .mli
vpath %.ml  $(SOURCEDIRS) $(OBJDIR)
vpath %.mli $(SOURCEDIRS) $(OBJDIR)
vpath %.c   $(SOURCEDIRS)


         # Compile an MLI file. After compilation move the result to OBJDIR
$(OBJDIR)/%.cmi: %.mli
	@$(NARRATIVE) Compiling interface $<
	$(AT)$(CAMLC.BYTE) $(COMPILEFLAGS.BYTE) -c $<
	$(ECHO)if test $(OBJDIR) != $(<D) ;then \
                   $(COMMAND) mv -f $(basename $<).cmi $(OBJDIR)/; \
                   mv -f $(basename $<).cmi $(OBJDIR)/ \
        ;fi


MAGIC =  res=$$?; \
	   if test $(OBJDIR) != $(<D) ;then \
              for ext in cmi cmo; do \
                if test -f $(basename $<).$$ext ;then \
                  $(COMMAND) mv -f $(basename $<).$$ext $(OBJDIR)/; \
                  mv -f $(basename $<).$$ext $(OBJDIR)/; \
                fi; \
              done; \
           fi; exit $$res


         # Compile an ML file. After compilation we 
         # copy to $(OBJDIR) the .cmi and the result of compilation.
$(OBJDIR)/%.cmo: %.ml
	@$(NARRATIVE) "Compiling           $< to bytecode $(COMPILEMSG)"
	@$(COMMAND) $(CAMLC.BYTE) $(COMPILEFLAGS.BYTE) -o $@ -c $<
	$(ECHO)$(CAMLC.BYTE) $(COMPILEFLAGS.BYTE) -o $@ -c $< ; $(MAGIC)

$(OBJDIR)/%.cmx: %.ml
	@$(NARRATIVE) "Compiling           $< to native $(COMPILEMSG)"
	@$(COMMAND) $(CAMLC.OPT) $(COMPILEFLAGS.OPT) -o $@ -c $<
	$(ECHO)$(CAMLC.OPT) $(COMPILEFLAGS.OPT) -o $@ -c $< ; $(MAGIC)


.PHONY: cleancaml
cleancaml:
	@rm -f $(OBJDIR)/*.cmi
	@rm -f $(OBJDIR)/*.cmo
	@rm -f $(OBJDIR)/*.cmx
	@rm -f $(OBJDIR)/*.cma
	@rm -f $(OBJDIR)/*.cmxa
	@rm -f $(OBJDIR)/*.exe
	@rm -f $(OBJDIR)/*.obj
	@rm -f $(OBJDIR)/*.o
	@rm -f $(OBJDIR)/*.lib
	@rm -f $(OBJDIR)/*.a
	@rm -f $(OBJDIR)/*.mli
	@rm -f $(OBJDIR)/*.ml
	@rm -f $(DEPENDDIR)/*.d $(DEPENDDIR)/*.di





CAMLDEP = ocamldep

# Automatic dependency generation (see GNU info for details)
#
# Each .ml file has a .d (dependency file) which is automatically
# generated and included by the rules below.  The perl script replaces
# directory paths with $(OBJDIR)/
#
# Dependencies for .mli files reside in corresponding .di files.
#

# Replace the directories in the dependency rules with $(OBJDIR)/, since 
# we'll move .cmo/.cmx files there.
# 1. Strip any text followed by / or \.  The / case even strips slashes that
#    are preceded by whitespace, to account for unix absolute paths.
#    The \ case does not strip slashes that come immediately after whitespace,
#    to preserve the trailing \ at the end of Makefile rules.
# 2. Replace these directory names by '$(OBJDIR)/'
FIXDEPEND:=perl -e 'while(<>) { s%[^/\\ :]*/% %g; s%[^/\\ :]+\\% %g; s%([-a-zA-Z0-9+-.:/\/_]+)%\$$(OBJDIR)/$$1%g; print $$_;}'
# FIXDEPEND:=cat

DEPINCLUDES= -I $(OBJDIR) $(SOURCEDIRS:%=-I %)
$(DEPENDDIR)/%.d: %.ml
	@$(NARRATIVE) Generating dependency information for $<
	@$(COMMAND) $(CAMLDEP) $(DEPFLAGS) $(DEPINCLUDES) $<
	$(ECHO)$(CAMLDEP) $(DEPFLAGS) $(DEPINCLUDES) $< | $(FIXDEPEND) > $@

$(DEPENDDIR)/%.di: %.mli
	@$(NARRATIVE) Generating dependency information for $<
	@$(COMMAND) $(CAMLDEP) $(DEPFLAGS) $(DEPINCLUDES) $<
	$(ECHO)$(CAMLDEP) $(DEPFLAGS) $(DEPINCLUDES) $< | $(FIXDEPEND) > $@

# sm: it turns out there's a variable which lists all the goals
# specified on the command line; I'll use this to set CLEANING
# (which is not set anywhere else, currently)
ifeq ($(MAKECMDGOALS),clean)
  #$(warning "Skipping dependency rules because we're cleaning")
  CLEANING := 1
endif

ifndef CLEANING
-include $(MODULES:%=$(DEPENDDIR)/%.d)
-include $(MODULES:%=$(DEPENDDIR)/%.di)
endif

listmodules: 
	@echo $(MODULES)
